// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package azuredevops

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages permissions for an Folder (Component)
//
// > **Note** Permissions can be assigned to group principals and not to single user principals.
//
// ## Permission levels
//
// Permission for Areas within Azure DevOps can be applied on two different levels.
// Those levels are reflected by specifying (or omitting) values for the arguments `project_id` and `path`.
//
// ## Example Usage
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		project, err := azuredevops.NewProject(ctx, "project", &azuredevops.ProjectArgs{
// 			WorkItemTemplate: pulumi.String("Agile"),
// 			VersionControl:   pulumi.String("Git"),
// 			Visibility:       pulumi.String("private"),
// 			Description:      pulumi.String("Managed by Terraform"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = azuredevops.NewAreaPermissions(ctx, "root_permissions", &azuredevops.AreaPermissionsArgs{
// 			ProjectId: project.ID(),
// 			Principal: project_readers.ApplyT(func(project_readers GetGroupResult) (string, error) {
// 				return project_readers.Id, nil
// 			}).(pulumi.StringOutput),
// 			Path: pulumi.String("/"),
// 			Permissions: pulumi.StringMap{
// 				"CREATE_CHILDREN": pulumi.String("Deny"),
// 				"GENERIC_READ":    pulumi.String("Allow"),
// 				"DELETE":          pulumi.String("Deny"),
// 				"WORK_ITEM_READ":  pulumi.String("Allow"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Relevant Links
//
// * [Azure DevOps Service REST API 5.1 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-5.1)
//
// ## PAT Permissions Required
//
// - **Project & Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.
//
// ## Import
//
// The resource does not support import.
type BuildFolderPermissions struct {
	pulumi.CustomResourceState

	// The name of the folder to assign the permissions.
	Path pulumi.StringPtrOutput `pulumi:"path"`
	// the permissions to assign. The following permissions are available.
	Permissions pulumi.StringMapOutput `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal pulumi.StringOutput `pulumi:"principal"`
	// The ID of the project to assign the permissions.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace pulumi.BoolPtrOutput `pulumi:"replace"`
}

// NewBuildFolderPermissions registers a new resource with the given unique name, arguments, and options.
func NewBuildFolderPermissions(ctx *pulumi.Context,
	name string, args *BuildFolderPermissionsArgs, opts ...pulumi.ResourceOption) (*BuildFolderPermissions, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	if args.Principal == nil {
		return nil, errors.New("invalid value for required argument 'Principal'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	var resource BuildFolderPermissions
	err := ctx.RegisterResource("azuredevops-extensions:index:BuildFolderPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBuildFolderPermissions gets an existing BuildFolderPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBuildFolderPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BuildFolderPermissionsState, opts ...pulumi.ResourceOption) (*BuildFolderPermissions, error) {
	var resource BuildFolderPermissions
	err := ctx.ReadResource("azuredevops-extensions:index:BuildFolderPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BuildFolderPermissions resources.
type buildFolderPermissionsState struct {
	// The name of the branch to assign the permissions.
	Path *string `pulumi:"path"`
	// the permissions to assign. The following permissions are available.
	Permissions map[string]string `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal *string `pulumi:"principal"`
	// The ID of the project to assign the permissions.
	ProjectId *string `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace *bool `pulumi:"replace"`
}

type BuildFolderPermissionsState struct {
	// The name of the branch to assign the permissions.
	Path pulumi.StringPtrInput
	// the permissions to assign. The following permissions are available.
	Permissions pulumi.StringMapInput
	// The **group** principal to assign the permissions.
	Principal pulumi.StringPtrInput
	// The ID of the project to assign the permissions.
	ProjectId pulumi.StringPtrInput
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace pulumi.BoolPtrInput
}

func (BuildFolderPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*buildFolderPermissionsState)(nil)).Elem()
}

type buildFolderPermissionsArgs struct {
	// The name of the branch to assign the permissions.
	Path *string `pulumi:"path"`
	// the permissions to assign. The following permissions are available.
	Permissions map[string]string `pulumi:"permissions"`
	// The **group** principal to assign the permissions.
	Principal string `pulumi:"principal"`
	// The ID of the project to assign the permissions.
	ProjectId string `pulumi:"projectId"`
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace *bool `pulumi:"replace"`
}

// The set of arguments for constructing a BuildFolderPermissions resource.
type BuildFolderPermissionsArgs struct {
	// The name of the branch to assign the permissions.
	Path pulumi.StringPtrInput
	// the permissions to assign. The following permissions are available.
	Permissions pulumi.StringMapInput
	// The **group** principal to assign the permissions.
	Principal pulumi.StringInput
	// The ID of the project to assign the permissions.
	ProjectId pulumi.StringInput
	// Replace (`true`) or merge (`false`) the permissions. Default: `true`.
	Replace pulumi.BoolPtrInput
}

func (BuildFolderPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*buildFolderPermissionsArgs)(nil)).Elem()
}

type BuildFolderPermissionsInput interface {
	pulumi.Input

	ToBuildFolderPermissionsOutput() BuildFolderPermissionsOutput
	ToBuildFolderPermissionsOutputWithContext(ctx context.Context) BuildFolderPermissionsOutput
}

func (*BuildFolderPermissions) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildFolderPermissions)(nil))
}

func (i *BuildFolderPermissions) ToBuildFolderPermissionsOutput() BuildFolderPermissionsOutput {
	return i.ToBuildFolderPermissionsOutputWithContext(context.Background())
}

func (i *BuildFolderPermissions) ToBuildFolderPermissionsOutputWithContext(ctx context.Context) BuildFolderPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildFolderPermissionsOutput)
}

func (i *BuildFolderPermissions) ToBuildFolderPermissionsPtrOutput() BuildFolderPermissionsPtrOutput {
	return i.ToBuildFolderPermissionsPtrOutputWithContext(context.Background())
}

func (i *BuildFolderPermissions) ToBuildFolderPermissionsPtrOutputWithContext(ctx context.Context) BuildFolderPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildFolderPermissionsPtrOutput)
}

type BuildFolderPermissionsPtrInput interface {
	pulumi.Input

	ToBuildFolderPermissionsPtrOutput() BuildFolderPermissionsPtrOutput
	ToBuildFolderPermissionsPtrOutputWithContext(ctx context.Context) BuildFolderPermissionsPtrOutput
}

type buildFolderPermissionsPtrType BuildFolderPermissionsArgs

func (*buildFolderPermissionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildFolderPermissions)(nil))
}

func (i *buildFolderPermissionsPtrType) ToBuildFolderPermissionsPtrOutput() BuildFolderPermissionsPtrOutput {
	return i.ToBuildFolderPermissionsPtrOutputWithContext(context.Background())
}

func (i *buildFolderPermissionsPtrType) ToBuildFolderPermissionsPtrOutputWithContext(ctx context.Context) BuildFolderPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildFolderPermissionsPtrOutput)
}

// BuildFolderPermissionsArrayInput is an input type that accepts BuildFolderPermissionsArray and BuildFolderPermissionsArrayOutput values.
// You can construct a concrete instance of `BuildFolderPermissionsArrayInput` via:
//
//          BuildFolderPermissionsArray{ BuildFolderPermissionsArgs{...} }
type BuildFolderPermissionsArrayInput interface {
	pulumi.Input

	ToBuildFolderPermissionsArrayOutput() BuildFolderPermissionsArrayOutput
	ToBuildFolderPermissionsArrayOutputWithContext(context.Context) BuildFolderPermissionsArrayOutput
}

type BuildFolderPermissionsArray []BuildFolderPermissionsInput

func (BuildFolderPermissionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BuildFolderPermissions)(nil)).Elem()
}

func (i BuildFolderPermissionsArray) ToBuildFolderPermissionsArrayOutput() BuildFolderPermissionsArrayOutput {
	return i.ToBuildFolderPermissionsArrayOutputWithContext(context.Background())
}

func (i BuildFolderPermissionsArray) ToBuildFolderPermissionsArrayOutputWithContext(ctx context.Context) BuildFolderPermissionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildFolderPermissionsArrayOutput)
}

// BuildFolderPermissionsMapInput is an input type that accepts BuildFolderPermissionsMap and BuildFolderPermissionsMapOutput values.
// You can construct a concrete instance of `BuildFolderPermissionsMapInput` via:
//
//          BuildFolderPermissionsMap{ "key": BuildFolderPermissionsArgs{...} }
type BuildFolderPermissionsMapInput interface {
	pulumi.Input

	ToBuildFolderPermissionsMapOutput() BuildFolderPermissionsMapOutput
	ToBuildFolderPermissionsMapOutputWithContext(context.Context) BuildFolderPermissionsMapOutput
}

type BuildFolderPermissionsMap map[string]BuildFolderPermissionsInput

func (BuildFolderPermissionsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BuildFolderPermissions)(nil)).Elem()
}

func (i BuildFolderPermissionsMap) ToBuildFolderPermissionsMapOutput() BuildFolderPermissionsMapOutput {
	return i.ToBuildFolderPermissionsMapOutputWithContext(context.Background())
}

func (i BuildFolderPermissionsMap) ToBuildFolderPermissionsMapOutputWithContext(ctx context.Context) BuildFolderPermissionsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BuildFolderPermissionsMapOutput)
}

type BuildFolderPermissionsOutput struct {
	*pulumi.OutputState
}

func (BuildFolderPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BuildFolderPermissions)(nil))
}

func (o BuildFolderPermissionsOutput) ToBuildFolderPermissionsOutput() BuildFolderPermissionsOutput {
	return o
}

func (o BuildFolderPermissionsOutput) ToBuildFolderPermissionsOutputWithContext(ctx context.Context) BuildFolderPermissionsOutput {
	return o
}

func (o BuildFolderPermissionsOutput) ToBuildFolderPermissionsPtrOutput() BuildFolderPermissionsPtrOutput {
	return o.ToBuildFolderPermissionsPtrOutputWithContext(context.Background())
}

func (o BuildFolderPermissionsOutput) ToBuildFolderPermissionsPtrOutputWithContext(ctx context.Context) BuildFolderPermissionsPtrOutput {
	return o.ApplyT(func(v BuildFolderPermissions) *BuildFolderPermissions {
		return &v
	}).(BuildFolderPermissionsPtrOutput)
}

type BuildFolderPermissionsPtrOutput struct {
	*pulumi.OutputState
}

func (BuildFolderPermissionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BuildFolderPermissions)(nil))
}

func (o BuildFolderPermissionsPtrOutput) ToBuildFolderPermissionsPtrOutput() BuildFolderPermissionsPtrOutput {
	return o
}

func (o BuildFolderPermissionsPtrOutput) ToBuildFolderPermissionsPtrOutputWithContext(ctx context.Context) BuildFolderPermissionsPtrOutput {
	return o
}

type BuildFolderPermissionsArrayOutput struct{ *pulumi.OutputState }

func (BuildFolderPermissionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BuildFolderPermissions)(nil))
}

func (o BuildFolderPermissionsArrayOutput) ToBuildFolderPermissionsArrayOutput() BuildFolderPermissionsArrayOutput {
	return o
}

func (o BuildFolderPermissionsArrayOutput) ToBuildFolderPermissionsArrayOutputWithContext(ctx context.Context) BuildFolderPermissionsArrayOutput {
	return o
}

func (o BuildFolderPermissionsArrayOutput) Index(i pulumi.IntInput) BuildFolderPermissionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BuildFolderPermissions {
		return vs[0].([]BuildFolderPermissions)[vs[1].(int)]
	}).(BuildFolderPermissionsOutput)
}

type BuildFolderPermissionsMapOutput struct{ *pulumi.OutputState }

func (BuildFolderPermissionsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BuildFolderPermissions)(nil))
}

func (o BuildFolderPermissionsMapOutput) ToBuildFolderPermissionsMapOutput() BuildFolderPermissionsMapOutput {
	return o
}

func (o BuildFolderPermissionsMapOutput) ToBuildFolderPermissionsMapOutputWithContext(ctx context.Context) BuildFolderPermissionsMapOutput {
	return o
}

func (o BuildFolderPermissionsMapOutput) MapIndex(k pulumi.StringInput) BuildFolderPermissionsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) BuildFolderPermissions {
		return vs[0].(map[string]BuildFolderPermissions)[vs[1].(string)]
	}).(BuildFolderPermissionsOutput)
}

func init() {
	pulumi.RegisterOutputType(BuildFolderPermissionsOutput{})
	pulumi.RegisterOutputType(BuildFolderPermissionsPtrOutput{})
	pulumi.RegisterOutputType(BuildFolderPermissionsArrayOutput{})
	pulumi.RegisterOutputType(BuildFolderPermissionsMapOutput{})
}
