// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "./types";
import * as utilities from "./utilities";

export class RoleAssignment extends pulumi.CustomResource {
    /**
     * Get an existing RoleAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): RoleAssignment {
        return new RoleAssignment(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azuredevops-extensions:index:RoleAssignment';

    /**
     * Returns true if the given object is an instance of RoleAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoleAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoleAssignment.__pulumiType;
    }

    /**
     * Id of the identity to assign the role to.
     */
    public readonly identityId!: pulumi.Output<string>;
    /**
     * Id of the resource on which the role is to be assigned (ex projectId).
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * The name of the role assigned.
     */
    public readonly roleName!: pulumi.Output<enums.RoleName>;
    /**
     * The scope name.
     */
    public readonly scopeName!: pulumi.Output<enums.ScopeName>;
    /**
     * Unique id of the user given the role assignment.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a RoleAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleAssignmentArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.identityId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identityId'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.roleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            if ((!args || args.scopeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeName'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            inputs["identityId"] = args ? args.identityId : undefined;
            inputs["resourceId"] = args ? args.resourceId : undefined;
            inputs["roleName"] = args ? args.roleName : undefined;
            inputs["scopeName"] = args ? args.scopeName : undefined;
            inputs["userId"] = args ? args.userId : undefined;
        } else {
            inputs["identityId"] = undefined /*out*/;
            inputs["resourceId"] = undefined /*out*/;
            inputs["roleName"] = undefined /*out*/;
            inputs["scopeName"] = undefined /*out*/;
            inputs["userId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(RoleAssignment.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a RoleAssignment resource.
 */
export interface RoleAssignmentArgs {
    /**
     * Id of the identity to assign the role to.
     */
    identityId: pulumi.Input<string>;
    /**
     * Id of the resource on which the role is to be assigned.
     */
    resourceId: pulumi.Input<string>;
    /**
     * The name of the role assigned.
     */
    roleName: pulumi.Input<enums.RoleName>;
    /**
     * The scope name.
     */
    scopeName: pulumi.Input<enums.ScopeName>;
    /**
     * Unique id of the user given the role assignment.
     */
    userId: pulumi.Input<string>;
}
