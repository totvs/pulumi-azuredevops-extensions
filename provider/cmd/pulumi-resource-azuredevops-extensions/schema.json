{
    "name": "azuredevops-extensions",
    "description": "A Pulumi provider to manage azuredevops aditional resources not included in azuredevops provider.",
    "version": "0.0.1",
    "keywords": [
        "pulumi",
        "azuredevops"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package expose extra azuredevops services",
    "repository": "https://github.com/totvs/pulumi-azuredevops-extensions",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "orgServiceUrl": {
                "type": "string",
                "description": "The url of the Azure DevOps instance which should be used.\n",
                "defaultInfo": {
                    "environment": [
                        "AZDO_ORG_SERVICE_URL"
                    ]
                }
            },
            "personalAccessToken": {
                "type": "string",
                "description": "The personal access token which should be used.\n",
                "defaultInfo": {
                    "environment": [
                        "AZDO_PERSONAL_ACCESS_TOKEN"
                    ]
                }
            },
            "numberOfAttempts": {
                "type": "integer",
                "description": "The number of attempts.\n",
                "defaultInfo": {
                    "environment": [
                        "NUMBER_OF_ATTEMPTS"
                    ]
                }
            }
        }
    },
    "resources": {
        "azuredevops-extensions:index:BuildFolderPermissions": {
             "description": "Manages permissions for an Folder (Component)\n\n\u003e **Note** Permissions can be assigned to group principals and not to single user principals.\n\n## Permission levels\n\nPermission for Areas within Azure DevOps can be applied on two different levels.\nThose levels are reflected by specifying (or omitting) values for the arguments `project_id` and `path`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as azuredevops from \"@pulumi/azuredevops\";\n\nconst project = new azuredevops.Project(\"project\", {\n    workItemTemplate: \"Agile\",\n    versionControl: \"Git\",\n    visibility: \"private\",\n    description: \"Managed by Terraform\",\n});\nconst project-readers = project.id.apply(id =\u003e azuredevops.getGroup({\n    projectId: id,\n    name: \"Readers\",\n}));\nconst root_permissions = new azuredevops.AreaPermissions(\"root-permissions\", {\n    projectId: project.id,\n    principal: project_readers.apply(project_readers =\u003e project_readers.id),\n    path: \"/\",\n    permissions: {\n        CREATE_CHILDREN: \"Deny\",\n        GENERIC_READ: \"Allow\",\n        DELETE: \"Deny\",\n        WORK_ITEM_READ: \"Allow\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_azuredevops as azuredevops\n\nproject = azuredevops.Project(\"project\",\n    work_item_template=\"Agile\",\n    version_control=\"Git\",\n    visibility=\"private\",\n    description=\"Managed by Terraform\")\nproject_readers = project.id.apply(lambda id: azuredevops.get_group(project_id=id,\n    name=\"Readers\"))\nroot_permissions = azuredevops.AreaPermissions(\"root-permissions\",\n    project_id=project.id,\n    principal=project_readers.id,\n    path=\"/\",\n    permissions={\n        \"CREATE_CHILDREN\": \"Deny\",\n        \"GENERIC_READ\": \"Allow\",\n        \"DELETE\": \"Deny\",\n        \"WORK_ITEM_READ\": \"Allow\",\n    })\n```\n```csharp\nusing Pulumi;\nusing AzureDevOps = Pulumi.AzureDevOps;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var project = new AzureDevOps.Project(\"project\", new AzureDevOps.ProjectArgs\n        {\n            WorkItemTemplate = \"Agile\",\n            VersionControl = \"Git\",\n            Visibility = \"private\",\n            Description = \"Managed by Terraform\",\n        });\n        var project_readers = project.Id.Apply(id =\u003e AzureDevOps.GetGroup.InvokeAsync(new AzureDevOps.GetGroupArgs\n        {\n            ProjectId = id,\n            Name = \"Readers\",\n        }));\n        var root_permissions = new AzureDevOps.AreaPermissions(\"root-permissions\", new AzureDevOps.AreaPermissionsArgs\n        {\n            ProjectId = project.Id,\n            Principal = project_readers.Apply(project_readers =\u003e project_readers.Id),\n            Path = \"/\",\n            Permissions = \n            {\n                { \"CREATE_CHILDREN\", \"Deny\" },\n                { \"GENERIC_READ\", \"Allow\" },\n                { \"DELETE\", \"Deny\" },\n                { \"WORK_ITEM_READ\", \"Allow\" },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-azuredevops/sdk/v2/go/azuredevops\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tproject, err := azuredevops.NewProject(ctx, \"project\", \u0026azuredevops.ProjectArgs{\n\t\t\tWorkItemTemplate: pulumi.String(\"Agile\"),\n\t\t\tVersionControl:   pulumi.String(\"Git\"),\n\t\t\tVisibility:       pulumi.String(\"private\"),\n\t\t\tDescription:      pulumi.String(\"Managed by Terraform\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = azuredevops.NewAreaPermissions(ctx, \"root_permissions\", \u0026azuredevops.AreaPermissionsArgs{\n\t\t\tProjectId: project.ID(),\n\t\t\tPrincipal: project_readers.ApplyT(func(project_readers GetGroupResult) (string, error) {\n\t\t\t\treturn project_readers.Id, nil\n\t\t\t}).(pulumi.StringOutput),\n\t\t\tPath: pulumi.String(\"/\"),\n\t\t\tPermissions: pulumi.StringMap{\n\t\t\t\t\"CREATE_CHILDREN\": pulumi.String(\"Deny\"),\n\t\t\t\t\"GENERIC_READ\":    pulumi.String(\"Allow\"),\n\t\t\t\t\"DELETE\":          pulumi.String(\"Deny\"),\n\t\t\t\t\"WORK_ITEM_READ\":  pulumi.String(\"Allow\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n## Relevant Links\n\n* [Azure DevOps Service REST API 5.1 - Security](https://docs.microsoft.com/en-us/rest/api/azure/devops/security/?view=azure-devops-rest-5.1)\n\n## PAT Permissions Required\n\n- **Project \u0026 Team**: vso.security_manage - Grants the ability to read, write, and manage security permissions.\n\n\n## Import\n\nThe resource does not support import. ",
            "properties": {
                "path": {
                    "type": "string",
                    "description": "The name of the folder to assign the permissions.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                }
            },
            "required": [
                "permissions",
                "principal",
                "projectId"
            ],
            "inputProperties": {
                "path": {
                    "type": "string",
                    "description": "The name of the branch to assign the permissions.\n"
                },
                "permissions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "the permissions to assign. The following permissions are available.\n"
                },
                "principal": {
                    "type": "string",
                    "description": "The **group** principal to assign the permissions.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project to assign the permissions.\n"
                },
                "replace": {
                    "type": "boolean",
                    "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "principal",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FolderPermissions resources.\n",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "The name of the branch to assign the permissions.\n"
                    },
                    "permissions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "the permissions to assign. The following permissions are available.\n"
                    },
                    "principal": {
                        "type": "string",
                        "description": "The **group** principal to assign the permissions.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project to assign the permissions.\n"
                    },
                    "replace": {
                        "type": "boolean",
                        "description": "Replace (`true`) or merge (`false`) the permissions. Default: `true`.\n"
                    }
                },
                "type": "object"
            }
        },
        "azuredevops-extensions:index:BuildFolder": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to be created.\n"
                }
            },
            "required": [
                "projectId",
                "path"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "path": {
                    "type": "string",
                    "description": "The path to be created.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "path"
            ]
        },
        "azuredevops-extensions:index:RoleAssignment": {
            "properties": {
                "resourceId": {
                    "type": "string",
                    "description": "Id of the resource on which the role is to be assigned (ex projectId).\n"
                },
                "identityId": {
                    "type": "string",
                    "description": "Id of the identity to assign the role to.\n"
                },
                "scopeName": {
                    "type": "object",
                    "$ref": "#/types/azuredevops-extensions:index:ScopeName",
                    "description": "The scope name.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "Unique id of the user given the role assignment.\n"
                },
                "roleName": {
                    "type": "object",
                    "$ref": "#/types/azuredevops-extensions:index:RoleName",
                    "description": "The name of the role assigned.\n"
                }
            },
            "required": [
                "resourceId",
                "identityId",
                "scopeName",
                "userId",
                "roleName"
            ],
            "inputProperties": {
                "resourceId": {
                    "type": "string",
                    "description": "Id of the resource on which the role is to be assigned.\n"
                },
                "identityId": {
                    "type": "string",
                    "description": "Id of the identity to assign the role to.\n"
                },
                "scopeName": {
                    "type": "object",
                    "$ref": "#/types/azuredevops-extensions:index:ScopeName",
                    "description": "The scope name.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "Unique id of the user given the role assignment.\n"
                },
                "roleName": {
                    "type": "object",
                    "$ref": "#/types/azuredevops-extensions:index:RoleName",
                    "description": "The name of the role assigned.\n"
                }
            },
            "requiredInputs": [
                "resourceId",
                "identityId",
                "scopeName",
                "userId",
                "roleName"
            ]
        },
        "azuredevops-extensions:index:PipelineEnvironment": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The environment name.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "kubernetesResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops-extensions:index:KubernetesResource"
                    },
                    "description": "List of kubernetes resources.\n"
                }
            },
            "required": [
                "name",
                "projectId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "projectId": {
                    "type": "string",
                    "description": "The project ID or project name.\n"
                },
                "kubernetesResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/azuredevops-extensions:index:KubernetesResource"
                    },
                    "description": "List of kubernetes resources.\n"
                }
            },
            "requiredInputs": [
                "name",
                "projectId"
            ]
        }
    },
    "types": {
        "azuredevops-extensions:index:RoleName": {
            "type": "string",
            "enum": [
                {
                    "value": "Reader"
                },
                {
                    "value": "Administrator"
                },
                {
                    "value": "User"
                }
            ]
        },
        "azuredevops-extensions:index:ScopeName": {
            "type": "string",
            "enum": [
                {
                    "value": "VariableGroup"
                },
                {
                    "value": "ServiceEndpoint"
                },
                {
                    "value": "Environment"
                }
            ]
        },
        "azuredevops-extensions:index:KubernetesResource": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The resource name.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The resource namemespace.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The resource cluster name.\n"
                },
                "serviceEndpointId": {
                    "type": "string",
                    "description": "The service endpoint id.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "namespace",
                "clusterName",
                "serviceEndpointId"
            ]
        }
    },
    "language": {
        "csharp": {
            "dictionaryConstructors": true,
            "namespaces": {
                "azuredevops-extensions": "AzureDevopsExtensions"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath":"github.com/totvs/pulumi-azuredevops-extensions/sdk/v3/go/azuredevops"
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            }
        },
        "python": {
            "requires": {
                "pulumi": ">=3.0.0,<4.0.0"
            }
        }
    }
}
